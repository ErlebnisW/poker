expr_group: kuhn_poker
expr_name: test_ppo
log_dir: logs             #log directory
seed: 0
eval_only: False            #True if only want evaluation

distributed:
  use: False
  auto_connect:
  auto_copy:
  nodes:
    master:
      ip: "auto"
    workers:      
      - ip:

framework:
  name: "psro"                #framework name
  max_rounds: 50         #psro rounds
  meta_solver: "nash"         #'nash', 'uniform', 'pfsp'
  sync_training: True
  on_policy: True
  stopper:
    type: "poker_oracle_exploitablitiy_stopper"
    kwargs:
      min_reward_thresh_percent: 0.95
      # min_win_rate: 0.9
      max_steps: 400


agent_manager:
  num_agents: 2
  share_policies: True

evaluation_manager:
  num_eval_rollouts: 30

policy_data_manager:
  update_func: "kuhn_poker"
  fields:
    payoff:
      type: "matrix"
      missing_value: -100
    score:
      type: "matrix"
      missing_value: -100
    win:
      type: "matrix"
      missing_value: -100
    lose:
      type: "matrix"
      missing_value: -100
    reward:
      type: "matrix"
      missing_value: -100
    exploitability:
      type: "array"
      missing_value: -100


monitor:
  type: "local"   #'remote': wandb or 'local': tensorboard
  distributed:
    resources:
      num_cpus: 1
      resources:
        - ["node:${distributed.nodes.master.ip}",0.01]

league:
  role: "client"
  server_ip: ""
  server_port: ""

rollout_manager:
  distributed:
    resources:
      num_cpus: 1
      resources:
        - ["node:${distributed.nodes.master.ip}",0.01]
  num_workers: 5
  seed: 12345
  saving_interval: 100 # the sequence of dump model's weight
  batch_size: ${rollout_manager.num_workers}
  eval_batch_size: 100
  eval_freq: 10 # epochs
  min_samples: ${training_manager.batch_size}
  rollout_metric_cfgs:
    reward:
      type: "sliding"
      window_size: 20
      init_list: [-10000]
    win:
      type: "sliding"
      window_size: 20
      init_list: [0,0,0,0,0]
  worker:
    distributed:
      resources:
        num_cpus: 1
    rollout_length: 3001
    eval_rollout_length: 3001
    sample_length: 1000
    padding_length: # of not use in gr_football
    rollout_func_name: "rollout_func_aec"
    episode_mode: 'traj'
    credit_reassign:
    envs:
      - cls: "kuhn_poker"
        id_prefix: "kuhn_poker"

training_manager:
  distributed:
    resources:
      num_cpus: 1
      resources:
        - ["node:${distributed.nodes.master.ip}",0.01]
 
  master_addr: "127.0.0.1"
  master_port:  "12774"
  local_queue_size: 1
  batch_size: ${rollout_manager.num_workers} # how many data sample from DatasetServer per time.
  num_prefetchers: 1
  data_prefetcher:
    distributed:
      resources:
        num_cpus: 1
  num_trainers: 1 # equals to number of GPUs by default
  # control the frequency of remote parameter update
  update_interval: 1
  gpu_preload: False
  trainer:
    distributed:
      resources:
        num_cpus: 1
        num_gpus: 1
        resources:
          - ["node:${distributed.nodes.master.ip}",0.01]
    optimizer: "Adam"
    actor_lr: 5.e-4
    critic_lr: 5.e-4
    opti_eps: 1.e-5
    weight_decay: 0.0
    lr_decay: False            #update_linear_schedule
    lr_decay_epoch: 2000      #how many rollout steps till zero

data_server:
  distributed:
    resources:
      num_cpus: 1
      resources:
        - ["node:${distributed.nodes.master.ip}",0.01]
  table_cfg:
    capacity: 1000
    sampler_type: "lumrf"
    sample_max_usage: 1
    rate_limiter_cfg:
      min_size: ${training_manager.batch_size}
      # r_w_ratio: 10.0
  read_timeout: 1

policy_server:
  distributed:
    resources:
      num_cpus: 1
      resources:
        - ["node:${distributed.nodes.master.ip}",0.01]

populations:
  - population_id: default # population_id
    algorithm:
      name: "MAPPO"
      model_config:
        model: "kuhn_poker.ppo"       # model type
        initialization:
          use_orthogonal: True
          gain: 1.
        actor:
          network: mlp
          layers:
            - units: 256
              activation: ReLU
            - units: 128
              activation: ReLU
            - units: 64
              activation: ReLU
          output:
            activation: False
        critic:
          network: mlp
          layers:
            - units: 256
              activation: ReLU
            - units: 128
              activation: ReLU
            - units: 64
              activation: ReLU
          output:
            activation: False

      # set hyper parameter
      custom_config:
        FE_cfg:
          num_players: 10    #config sent to the Feature Encoder
        gamma: 0.99
        use_cuda: False  # enable cuda or not
        use_q_head: False
        ppo_epoch: 5
        num_mini_batch: 1  # the number of mini-batches
        
        return_mode: mc
        gae:
          gae_lambda: 0.95
        vtrace:
          clip_rho_threshold: 1.0
          clip_pg_rho_threshold: 100.0

        use_rnn: False
        # this is not used, instead it is fixed to last hidden in actor/critic
        rnn_layer_num: 1
        rnn_data_chunk_length: 16

        use_feature_normalization: True
        use_popart: True
        popart_beta: 0.99999

        entropy_coef: 0.00
        clip_param: 0.2
        # kl_early_stop: 0.01

        use_modified_mappo: False

      policy_init_cfg:
        agent_0: # agent_id
          new_policy_ctr_start: -1
          init_cfg:
            - condition: "==0" # condition if True in order
              strategy: random # now support pretrained, inherit_last, random
              policy_id: 
              policy_dir:
            - condition: "default" # default case.
              strategy: random # now support pretrained, inherit_last, random
              policy_id:
              policy_dir:
          initial_policies:                         #initial population
